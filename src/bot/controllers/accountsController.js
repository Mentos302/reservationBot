const service = require('../services/accountsService')
const Extra = require('telegraf/extra')

class AccountControllers {
  constructor() {
    this.addNewAccount = this.addNewAccount
  }

  async getActiveAccounts(ctx) {
    try {
      const account = await service.getActiveAccounts()
      let msg = `üí° –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, <b>–æ–∂–∏–¥–∞—é—â–∏–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é: [${account.length}]</b>\n`

      account.forEach((e) => {
        msg += `\nID: <b>${e.linkID}</b>`
      })

      ctx.reply(
        msg,
        Extra.HTML().markup((m) =>
          m.inlineKeyboard([
            m.callbackButton(`üìå –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç`, 'add'),
            m.callbackButton(`‚ùå –£–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç`, 'remove'),
          ])
        )
      )
    } catch (e) {
      ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`)
    }
  }

  toAdding(ctx) {
    ctx.scene.enter('getemail')
  }

  toRemoving(ctx) {
    ctx.scene.enter('removeaccount')
  }

  reqLinkIDAccountToAdd(ctx) {
    ctx.reply(
      'üì¨ –í–≤–µ–¥–∏—Ç–µ <b>ID –∞–∫–∫–∞—É–Ω—Ç–∞</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.',
      Extra.HTML()
    )
  }

  async resLinkIDAccountToAdd(ctx) {
    try {
      const { text } = ctx.message

      await service.addNewAccount(text)

      await ctx.reply(
        `–ê–∫–∫–∞—É–Ω—Ç <b>ID#${text}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`,
        Extra.HTML()
      )

      ctx.scene.enter('activelist')
    } catch (e) {
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    }
  }

  reqLinkIDToRemove(ctx) {
    ctx.reply(
      'üì¨ –í–≤–µ–¥–∏—Ç–µ <b>ID –∞–∫–∫–∞—É–Ω—Ç–∞</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å.',
      Extra.HTML()
    )
  }

  async resLinkIDToRemove(ctx) {
    try {
      const linkID = ctx.message.text

      await service.removeAccount(linkID)

      await ctx.reply(
        `–ê–∫–∫–∞—É–Ω—Ç <b>ID#${linkID}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`,
        Extra.HTML()
      )

      ctx.scene.enter('activelist')
    } catch (e) {
      ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
    }
  }

  msgTypeError(ctx) {
    ctx.reply('–ù–µ –ø–æ–Ω–∏–º–∞—é, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!')

    ctx.scene.reenter()
  }
}

module.exports = new AccountControllers()
